// let name : string;
// let age : number;
// let isStudent : boolean;
// let hobbies : string[];
// let role : [number, string]

// how to define a object
// way 1
// let person : Object; // good but not prefered because so many values are present in the object so how to handle this things

// type Persone = {
//   name : string;
//   age : number;
// }

// let persone : Persone = {
//   name : 'Gaurav',
//   age : 30
// };

// but now i want to make the age property as optional

// type Persone2 = {
//   name : string;
//   age? : number;
// }

// let persone2 : Persone2 = {
//   name : 'Gaurav',
// }

// i wanta array of persons how to do that

// let lotsOfPeople : Persone[];

// i want to assign the variable with two types

// let age2 : number | string; // | -> is a union simple
// age2 = "one"
// age2 = 30

// function

// function printName(name : string){
//   console.log(name);
// }

// printName("Gaurav")

// let printName : Function;

// let printName1 : (name : string) => void;
// let printName2 : (name : string) => never;
// what is the difference between void and never
// --> void returns undefined
// --> never returns nothing

// rather than using any use unkown
// let personName : unknown;


// interfaces

// interface Person2 {
//   name : string;
//   age? : number;
// }

// interface Guy extends Person2 {
//   profession : string;
// }

// type X = Person2 & {
//   a : string;
//   b : number;
// }

// type Y = X & {
//   c : string;
//   d : number;
// }

// let y : Y = {
//   c : "adc",
//   d : 23
// }


For a functon call we can also specifies the return type of a sepecific function like below example

function getFavoriteNumber(): number {
  return 26;
}



